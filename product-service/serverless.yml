service: product-service

frameworkVersion: "3"
useDotenv: true
custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  documentation: ${file(serverless.doc.yml):documentation}
  productsTableName: 'products'
  stocksTableName: "stocks"
  DATABASE_USERNAME: ${env:DATABASE_USERNAME}
  DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
  DATABASE_NAME: ${env:DB_NAME}

plugins:
  - serverless-better-credentials
  - serverless-webpack
  - serverless-openapi-documenter
package:
  individually: true
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  apiGateway:
    minimumCompressionSize: 1024
  memorySize: 128
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLES: 1
    PRODUCTS_TABLE: ${self:custom.productsTableName}
    STOCKS_TABLE: ${self:custom.stocksTableName}
    POSTGRESQL_HOST: !GetAtt PostgreSqlRDSInstance.Endpoint.Address
    POSTGRESQL_PORT: !GetAtt PostgreSqlRDSInstance.Endpoint.Port
    DATABASE_USERNAME: ${self:custom.DATABASE_USERNAME}
    DATABASE_PASSWORD: ${self:custom.DATABASE_PASSWORD}
    DATABASE_NAME: ${self:custom.DATABASE_NAME}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "rds:connect"
            - "rds:CreateDBInstance"
            - "rds:ModifyDBInstance"
            - "rds:DeleteDBInstance"
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:rds:::'
                - Ref: PostgreSqlRDSInstance
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [ ProductsTable, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [ StocksTable, Arn ]
functions:
  createProduct:
    handler: src/handlers/createProduct/handler.createProduct
    events:
      - http:
          method: post
          path: products
          documentation:
            summary: Create a new product
            description: OK
  getProductsList:
    handler: src/handlers/getProductsList/handler.getProductsList
    events:
      - http:
          method: get
          path: products
          documentation:
            summary: Return list of Products
            description: OK
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: Array of products
                responseModels:
                  application/json: GetProductsListResponse
  getProductById:
    handler: src/handlers/getProductById/handler.getProductById
    events:
      - http:
          method: get
          path: products/{productId}
          documentation:
            summary: Return a product by ID
            description: OK
            pathParams:
              - name: productId
                description: Product Id
                schema:
                  type: integer
                  pattern: "^[0-9]+$"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: Product with specified id
                responseModels:
                  application/json: GetProductResponse
              - statusCode: 404
                responseBody:
                  description: Not found error
                responseModels:
                  application/json: GetProductErrorResponse
          request:
            parameters:
              paths:
                productId: true

resources:
  Resources:
    PostgreSqlRDSInstance:
      Type: AWS::RDS::DBInstance
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        MasterUsername: ${self:custom.DATABASE_USERNAME}
        MasterUserPassword: ${self:custom.DATABASE_PASSWORD}
        DBName: ${self:custom.DATABASE_NAME}
        AllocatedStorage: 5
        DBInstanceClass: db.t3.micro
        Engine: postgres
        PubliclyAccessible: true

    ProductsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      UpdateReplacePolicy: Snapshot
      Properties:
        TableName: ${self:custom.productsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StocksTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      UpdateReplacePolicy: Snapshot
      Properties:
        TableName: ${self:custom.stocksTableName}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
