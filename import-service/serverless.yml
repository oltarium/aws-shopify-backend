service: import-service

frameworkVersion: "3"

custom:
  webpack:
    webpackConfig: webpack.config.js
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
    includeModules:
      forceInclude:
        - csv-parser
  bucket: awsuploaded
  region: us-east-1
  sqsName: catalogItemsQueue.fifo
plugins:
  - serverless-better-credentials
  - serverless-webpack
package:
  individually: true
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  apiGateway:
    minimumCompressionSize: 1024
  memorySize: 128
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLES: 1
    REGION: ${self:custom.region}
    BUCKET: ${self:custom.bucket}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: "*"
        - Effect: Allow
          Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
          Resource: 'arn:aws:logs:*:*:*'
        - Effect: Allow
          Action:
            - "sqs:SendMessage"
          Resource: arn:aws:sqs:${aws:region}:${aws:accountId}:${self:custom.sqsName}
functions:
  importProductFile:
    handler: src/handlers/importProductsFile/handler.importProductsFile
    events:
      - http:
          method: get
          cors: true
          path: import
          authorizer:
            type: token
            name: basicAuthorizer
            arn: arn:aws:lambda:us-east-1:492825409148:function:authorization-service-dev-basicAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: src/handlers/importFileParser/handler.importFileParser
    events:
      - s3:
          event: s3:ObjectCreated:*
          bucket: ${self:custom.bucket}
          existing: true
          rules:
            - prefix: uploaded/

resources:
  Resources:
    Unauthorized:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          "gatewayresponse.header.Access-Control-Allow-Origin": "'*'"
          "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
        ResponseType: "DEFAULT_4XX"
        RestApiId:
          Ref: "ApiGatewayRestApi"
    Uploads:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "Authorization"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT
              AllowedOrigins:
                - "*"
